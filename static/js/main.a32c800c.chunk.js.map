{"version":3,"sources":["store/actionTypes.ts","constants/api.ts","constants/todos.ts","store/rootReducer.ts","store/index.ts","store/reducerWithDevTools.ts","utils/api.ts","components/UserItem/UserItem.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","containers/TodoApp/TodoApp.ts","store/actions.ts","utils/dataMappers.ts","containers/TodoApp/TodoAppTemplate.tsx","containers/SortTodosSelect/SortTodosSelect.ts","containers/SortTodosSelect/SortTodosSelectTemplate.tsx","index.tsx","App/App.tsx"],"names":["ActionTypes","TodosSortBy","initialState","isLoaded","isLoading","todos","users","sortBy","Title","rootReducer","state","action","type","SetIsLoading","payload","SetIsLoaded","SetUsers","SetTodos","SetSortBy","DeleteTodo","filter","id","store","createStore","getData","url","a","fetch","resposne","ok","Error","statusText","json","UserItem","name","email","TodoItem","props","title","completed","user","onDelete","handleDelete","useCallback","onClick","TodoList","deleteTodo","map","todo","key","mapDispatchToProps","startLoading","stopLoading","setTodos","setUsers","setIsLoaded","TodoApp","connect","length","usersMap","reduce","acc","userId","prepareTodos","loadData","Promise","all","then","todosFromServer","finally","sortedTodos","useMemo","sort","todoA","todoB","localeCompare","sortTodos","setSortBy","SortTodosSelect","handleChange","event","target","value","onChange","disabled","Object","values","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a32c800c.chunk.js","sourcesContent":["import { Action as ReduxAction } from 'redux';\nimport { TodosSortBy } from '../constants';\n\nexport enum ActionTypes {\n  SetTodos = 'SET_TODOS',\n  SetUsers = 'SET_USERS',\n  SetIsLoading = 'SET_IS_LOADING',\n  SetIsLoaded = 'SET_IS_LOADED',\n  SetSortBy = 'SET_SORT_BY',\n  DeleteTodo = 'DELETE_TODO',\n}\n\nexport interface Action<P, T = ActionTypes> extends ReduxAction<T> {\n  payload: P;\n}\n\nexport type SetLoadingAction = Action<boolean, ActionTypes.SetIsLoading>;\n\nexport type SetLoadedAction = Action<boolean, ActionTypes.SetIsLoaded>;\n\nexport type SetTodosAction = Action<Todo[], ActionTypes.SetTodos>;\n\nexport type SetSortByAction = Action<TodosSortBy, ActionTypes.SetSortBy>;\n\nexport type SetUsersAction = Action<User[], ActionTypes.SetUsers>;\n\nexport type DeleteTodoAction = Action<number, ActionTypes.DeleteTodo>;\n\nexport type Actions = SetLoadingAction\n| SetTodosAction\n| SetSortByAction\n| SetUsersAction\n| DeleteTodoAction\n| SetLoadedAction;\n","export const BASE_URL = 'https://jsonplaceholder.typicode.com';\n\nexport const TODOS_URL = 'todos';\n\nexport const USERS_URL = 'users';\n","export enum TodosSortBy {\n  Title = 'title',\n  UseName = 'user.name',\n  Completed = 'completed',\n}\n","import { Reducer } from 'redux';\nimport { ActionTypes, Actions } from './actionTypes';\nimport { TodosSortBy } from '../constants';\n\nconst initialState: State = {\n  isLoaded: false,\n  isLoading: false,\n  todos: [],\n  users: [],\n  sortBy: TodosSortBy.Title,\n};\n\nexport const rootReducer: Reducer<State, Actions> = (state = initialState, action) => {\n  switch (action.type) {\n    case ActionTypes.SetIsLoading: {\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n    }\n\n    case ActionTypes.SetIsLoaded: {\n      return {\n        ...state,\n        isLoaded: action.payload,\n      };\n    }\n\n    case ActionTypes.SetUsers: {\n      return {\n        ...state,\n        users: action.payload,\n      };\n    }\n\n    case ActionTypes.SetTodos: {\n      return {\n        ...state,\n        todos: action.payload,\n      };\n    }\n\n    case ActionTypes.SetSortBy: {\n      return {\n        ...state,\n        sortBy: action.payload,\n      };\n    }\n\n    case ActionTypes.DeleteTodo: {\n      return {\n        ...state,\n        todos: state.todos.filter(({ id }) => id !== action.payload),\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n","import { createStore } from 'redux';\nimport { reducerWithDevTools } from './reducerWithDevTools';\n\nexport * from './actions';\n\nexport const store = createStore(\n  ...reducerWithDevTools(),\n);\n","import { rootReducer } from './rootReducer';\n\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport const reducerWithDevTools = (): [typeof rootReducer, any?] => {\n  const args: [typeof rootReducer, any?] = [rootReducer];\n\n  if (process.env.NODE_ENV === 'development' && (window as any).__REDUX_DEVTOOLS_EXTENSION__) {\n    args.push((window as any).__REDUX_DEVTOOLS_EXTENSION__({\n      trace: true,\n    }));\n  }\n\n  return args;\n};\n","import { BASE_URL, TODOS_URL, USERS_URL } from '../constants';\n\nexport const getData = async <T>(url: string): Promise<T> => {\n  const resposne = await fetch(`${BASE_URL}/${url}`);\n\n  if (!resposne.ok) {\n    throw new Error(resposne.statusText);\n  }\n\n  return resposne.json() as Promise<T>;\n};\n\nexport const loadTodos = () => getData<Todo[]>(TODOS_URL);\n\nexport const loadUsers = () => getData<User[]>(USERS_URL);\n","import React, { FC } from 'react';\n\ntype Props = Pick<User, 'email' | 'name'>;\n\nexport const UserItem: FC<Props> = ({ name, email }) => (\n  <>\n    <p>\n      {`Name: ${name}`}\n    </p>\n    <p>\n      {`Email: ${email}`}\n    </p>\n  </>\n);\n","import React, { FC, useCallback } from 'react';\nimport { UserItem } from '../UserItem';\n\ninterface Props extends Pick<TodoWithUser, 'id' | 'title' | 'completed' | 'user'> {\n  onDelete: (id: number) => void;\n}\n\nexport const TodoItem: FC<Props> = (props) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n    onDelete,\n  } = props;\n\n  const handleDelete = useCallback(() => onDelete(id), [id, onDelete]);\n\n  return (\n    <li>\n      <p>{title}</p>\n      <span>{completed ? 'âœ…' : 'ðŸš«'}</span>\n\n      <UserItem\n        name={user.name}\n        email={user.email}\n      />\n\n      <button\n        type=\"button\"\n        onClick={handleDelete}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n","import React, { FC } from 'react';\nimport { TodoItem } from '../TodoItem';\n\ninterface Props {\n  todos: TodoWithUser[];\n  deleteTodo: (id: number) => void;\n}\n\nexport const TodoList: FC<Props> = ({ todos, deleteTodo }) => (\n  <ul>\n    {todos.map((todo) => (\n      <TodoItem\n        key={todo.id}\n        id={todo.id}\n        title={todo.title}\n        completed={todo.completed}\n        user={todo.user}\n        onDelete={deleteTodo}\n      />\n    ))}\n  </ul>\n);\n","import { connect, MapStateToProps } from 'react-redux';\nimport {\n  deleteTodo,\n  setTodos,\n  setUsers,\n  startLoading,\n  stopLoading,\n  setIsLoaded,\n} from '../../store';\nimport { prepareTodos } from '../../utils';\nimport { TodoAppTemplate, Props } from './TodoAppTemplate';\n\ntype StateProps = Pick<Props, 'sortBy' | 'todos' | 'isLoaded' | 'isLoading'>;\n\ntype DispatchProps = Pick<Props, 'startLoading' | 'stopLoading' | 'setTodos' | 'setUsers' | 'deleteTodo' | 'setIsLoaded'>;\n\nconst mapStateToProps: MapStateToProps<StateProps, {}, State> = (state: State) => {\n  const {\n    users,\n    todos,\n    sortBy,\n    isLoaded,\n    isLoading,\n  } = state;\n\n  const mappedTodos = !users.length && todos.length\n    ? []\n    : prepareTodos(todos, users);\n\n  return {\n    sortBy,\n    todos: mappedTodos,\n    isLoaded,\n    isLoading,\n  };\n};\n\nconst mapDispatchToProps = {\n  startLoading,\n  stopLoading,\n  setTodos,\n  setUsers,\n  deleteTodo,\n  setIsLoaded,\n};\n\nexport const TodoApp = connect<StateProps, DispatchProps, {}, State>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(TodoAppTemplate);\n","import {\n  ActionTypes,\n  SetLoadingAction,\n  SetTodosAction,\n  SetSortByAction,\n  SetUsersAction,\n  DeleteTodoAction,\n  SetLoadedAction,\n} from './actionTypes';\nimport { TodosSortBy } from '../constants';\n\nexport const startLoading = (): SetLoadingAction => ({\n  type: ActionTypes.SetIsLoading,\n  payload: true,\n});\n\nexport const stopLoading = (): SetLoadingAction => ({\n  type: ActionTypes.SetIsLoading,\n  payload: false,\n});\n\nexport const setIsLoaded = (): SetLoadedAction => ({\n  type: ActionTypes.SetIsLoaded,\n  payload: true,\n});\n\nexport const setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: ActionTypes.SetTodos,\n  payload: todos,\n});\n\nexport const setUsers = (users: User[]): SetUsersAction => ({\n  type: ActionTypes.SetUsers,\n  payload: users,\n});\n\nexport const setSortBy = (sortBy: TodosSortBy): SetSortByAction => ({\n  type: ActionTypes.SetSortBy,\n  payload: sortBy,\n});\n\nexport const deleteTodo = (id: number): DeleteTodoAction => ({\n  type: ActionTypes.DeleteTodo,\n  payload: id,\n});\n","import { TodosSortBy } from '../constants';\n\nexport const sortTodos = (todos: TodoWithUser[], sortBy: TodosSortBy): TodoWithUser[] => {\n  switch (sortBy) {\n    case 'title': {\n      return [...todos].sort((todoA, todoB) => todoA.title.localeCompare(todoB.title));\n    }\n\n    case 'completed': {\n      return [...todos].sort((todoA, todoB) => {\n        if (todoA.completed === todoB.completed) {\n          return 0;\n        }\n\n        return todoA.completed ? 1 : -1;\n      });\n    }\n\n    case 'user.name': {\n      return [...todos].sort((todoA, todoB) => todoA.user.name.localeCompare(todoB.user.name));\n    }\n\n    default:\n      return todos;\n  }\n};\n\nexport const prepareTodos = (todos: Todo[], users: User[]): TodoWithUser[] => {\n  const usersMap = users.reduce<Record<number, User>>((acc, user) => ({\n    ...acc,\n    [user.id]: user,\n  }), {});\n\n  return todos.map((todo) => {\n    return {\n      ...todo,\n      user: usersMap[todo.userId] as User,\n    };\n  });\n};\n","import React, {\n  FC, useMemo, useCallback,\n} from 'react';\nimport { sortTodos, loadUsers, loadTodos } from '../../utils';\nimport { TodoList } from '../../components/TodoList';\nimport { TodosSortBy } from '../../constants';\n\nexport interface Props {\n  todos: TodoWithUser[];\n  sortBy: TodosSortBy;\n  isLoaded: boolean;\n  isLoading: boolean;\n  startLoading: () => void;\n  stopLoading: () => void;\n  setIsLoaded: () => void;\n  setTodos: (todos: Todo[]) => void;\n  setUsers: (users: User[]) => void;\n  deleteTodo: (id: number) => void;\n}\n\nexport const TodoAppTemplate: FC<Props> = (props) => {\n  const {\n    todos,\n    sortBy,\n    isLoading,\n    isLoaded,\n    deleteTodo,\n    startLoading,\n    stopLoading,\n    setTodos,\n    setUsers,\n    setIsLoaded,\n  } = props;\n\n  const loadData = useCallback(() => {\n    startLoading();\n\n    Promise.all([loadUsers(), loadTodos()])\n      .then(([users, todosFromServer]) => {\n        setUsers(users);\n        setTodos(todosFromServer);\n        setIsLoaded();\n      })\n      .finally(() => stopLoading());\n  }, [setTodos, setUsers, startLoading, stopLoading, setIsLoaded]);\n\n  const sortedTodos = useMemo<TodoWithUser[]>(() => sortTodos(todos, sortBy), [sortBy, todos]);\n\n  if (!isLoaded && !isLoading) {\n    return (\n      <button\n        type=\"button\"\n        onClick={loadData}\n      >\n        Load Todos\n      </button>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <p>\n        Loading...\n      </p>\n    );\n  }\n\n  return (\n    <TodoList\n      todos={sortedTodos}\n      deleteTodo={deleteTodo}\n    />\n  );\n};\n","import { connect, MapStateToProps } from 'react-redux';\nimport {\n  setSortBy,\n} from '../../store';\nimport { SortTodosSelectTemplate, Props } from './SortTodosSelectTemplate';\n\ntype StateProps = Pick<Props, 'sortBy' | 'isLoaded'>;\n\ntype DispatchProps = Pick<Props, 'setSortBy'>;\n\nconst mapStateToProps: MapStateToProps<StateProps, {}, State> = (state: State) => {\n  return {\n    sortBy: state.sortBy,\n    isLoaded: state.isLoaded,\n  };\n};\n\nconst mapDispatchToProps = {\n  setSortBy,\n};\n\nexport const SortTodosSelect = connect<StateProps, DispatchProps, {}, State>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(SortTodosSelectTemplate);\n","import React, { FC, useCallback } from 'react';\nimport { TodosSortBy } from '../../constants';\n\nexport interface Props {\n  isLoaded: boolean;\n  sortBy: TodosSortBy;\n  setSortBy: (sortBy: TodosSortBy) => void;\n}\n\nexport const SortTodosSelectTemplate: FC<Props> = ({ sortBy, setSortBy, isLoaded }) => {\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSortBy(event.target.value as TodosSortBy);\n  }, [setSortBy]);\n\n  return (\n    <select\n      name=\"sortBy\"\n      value={sortBy}\n      onChange={handleChange}\n      disabled={!isLoaded}\n    >\n      {Object.values(TodosSortBy).map((name) => (\n        <option\n          key={name}\n          value={name}\n        >\n          {name}\n        </option>\n      ))}\n    </select>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { store } from '../store';\nimport { TodoApp } from '../containers/TodoApp';\nimport { SortTodosSelect } from '../containers/SortTodosSelect';\n\nexport const App = () => (\n  <Provider store={store}>\n    <SortTodosSelect />\n    <TodoApp />\n  </Provider>\n);\n"],"sourceRoot":""}